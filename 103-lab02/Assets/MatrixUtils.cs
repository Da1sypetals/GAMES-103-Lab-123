using UnityEngine;

// Generated by chatgpt.

namespace MatrixUtils {

    public static class VectorUtils {
        public static Matrix3 CrossMatrix(this Vector3 v) {
            return new Matrix3(
                0f,
                -v.z,
                v.y,
                v.z,
                0f,
                -v.x,
                -v.y,
                v.x,
                0f
            );
        }
    }


    public struct Matrix3 {
        public float m00, m01, m02;
        public float m10, m11, m12;
        public float m20, m21, m22;

        public override string ToString() {
            string row1 = $"[{m00}, {m01}, {m02}]";
            string row2 = $"[{m10}, {m11}, {m12}]";
            string row3 = $"[{m20}, {m21}, {m22}]";

            return $"{row1}\n{row2}\n{row3}";
        }

        public static Matrix3 Columns(Vector3 col1, Vector3 col2, Vector3 col3) {
            return new Matrix3 {
                m00 = col1.x, m10 = col1.y, m20 = col1.z,
                m01 = col2.x, m11 = col2.y, m21 = col2.z,
                m02 = col3.x, m12 = col3.y, m22 = col3.z
            };
        }

        public static Matrix3 Rows(Vector3 row1, Vector3 row2, Vector3 row3) {
            return new Matrix3 {
                m00 = row1.x, m01 = row1.y, m02 = row1.z,
                m10 = row2.x, m11 = row2.y, m12 = row2.z,
                m20 = row3.x, m21 = row3.y, m22 = row3.z
            };
        }

        public Matrix3(float m00, float m01, float m02,
            float m10, float m11, float m12,
            float m20, float m21, float m22) {
            this.m00 = m00;
            this.m01 = m01;
            this.m02 = m02;
            this.m10 = m10;
            this.m11 = m11;
            this.m12 = m12;
            this.m20 = m20;
            this.m21 = m21;
            this.m22 = m22;

        }

        public Matrix3 T {
            get {
                return new Matrix3(
                    m00,
                    m10,
                    m20,
                    m01,
                    m11,
                    m21,
                    m02,
                    m12,
                    m22
                );
            }
        }

        public static Matrix3 FromMatrix4x4(Matrix4x4 matrix) {
            return new Matrix3(
                matrix.m00,
                matrix.m01,
                matrix.m02,
                matrix.m10,
                matrix.m11,
                matrix.m12,
                matrix.m20,
                matrix.m21,
                matrix.m22
            );
        }

        public static Matrix3 Rotate(Quaternion q) {
            return Matrix3.FromMatrix4x4(Matrix4x4.Rotate(q));
        }

        public static Matrix3 operator +(Matrix3 a, Matrix3 b) {
            return new Matrix3(
                a.m00 + b.m00,
                a.m01 + b.m01,
                a.m02 + b.m02,
                a.m10 + b.m10,
                a.m11 + b.m11,
                a.m12 + b.m12,
                a.m20 + b.m20,
                a.m21 + b.m21,
                a.m22 + b.m22
            );
        }

        public static Matrix3 operator -(Matrix3 a, Matrix3 b) {
            return new Matrix3(
                a.m00 - b.m00,
                a.m01 - b.m01,
                a.m02 - b.m02,
                a.m10 - b.m10,
                a.m11 - b.m11,
                a.m12 - b.m12,
                a.m20 - b.m20,
                a.m21 - b.m21,
                a.m22 - b.m22
            );
        }

        public static Matrix3 operator *(Matrix3 a, Matrix3 b) {
            return new Matrix3(
                a.m00 * b.m00 + a.m01 * b.m10 + a.m02 * b.m20,
                a.m00 * b.m01 + a.m01 * b.m11 + a.m02 * b.m21,
                a.m00 * b.m02 + a.m01 * b.m12 + a.m02 * b.m22,
                a.m10 * b.m00 + a.m11 * b.m10 + a.m12 * b.m20,
                a.m10 * b.m01 + a.m11 * b.m11 + a.m12 * b.m21,
                a.m10 * b.m02 + a.m11 * b.m12 + a.m12 * b.m22,
                a.m20 * b.m00 + a.m21 * b.m10 + a.m22 * b.m20,
                a.m20 * b.m01 + a.m21 * b.m11 + a.m22 * b.m21,
                a.m20 * b.m02 + a.m21 * b.m12 + a.m22 * b.m22
            );
        }

        public static Vector3 operator *(Matrix3 matrix, Vector3 vector) {
            float x = matrix.m00 * vector.x + matrix.m01 * vector.y + matrix.m02 * vector.z;
            float y = matrix.m10 * vector.x + matrix.m11 * vector.y + matrix.m12 * vector.z;
            float z = matrix.m20 * vector.x + matrix.m21 * vector.y + matrix.m22 * vector.z;

            return new Vector3(x, y, z);
        }

        public static Vector3 operator *(Vector3 vector, Matrix3 matrix) {
            float x = vector.x * matrix.m00 + vector.y * matrix.m10 + vector.z * matrix.m20;
            float y = vector.x * matrix.m01 + vector.y * matrix.m11 + vector.z * matrix.m21;
            float z = vector.x * matrix.m02 + vector.y * matrix.m12 + vector.z * matrix.m22;

            return new Vector3(x, y, z);
        }

        public Matrix3 inverse {
            get {
                float det = this.determinant;
                if (Mathf.Approximately(det, 0)) {
                    Debug.LogError("Matrix is not invertible: determinant = 0.");
                    return this;
                }

                float invDet = 1f / det;

                return new Matrix3(
                    (m11 * m22 - m12 * m21) * invDet,
                    (m02 * m21 - m01 * m22) * invDet,
                    (m01 * m12 - m02 * m11) * invDet,
                    (m12 * m20 - m10 * m22) * invDet,
                    (m00 * m22 - m02 * m20) * invDet,
                    (m02 * m10 - m00 * m12) * invDet,
                    (m10 * m21 - m11 * m20) * invDet,
                    (m01 * m20 - m00 * m21) * invDet,
                    (m00 * m11 - m01 * m10) * invDet
                );
            }
        }

        public float determinant {
            get {
                return m00 * (m11 * m22 - m12 * m21) +
                       m01 * (m12 * m20 - m10 * m22) +
                       m02 * (m10 * m21 - m11 * m20);
            }
        }

        public float this[int i, int j] {
            get {
                if (i == 0) {
                    if (j == 0) return m00;
                    if (j == 1) return m01;
                    if (j == 2) return m02;
                } else if (i == 1) {
                    if (j == 0) return m10;
                    if (j == 1) return m11;
                    if (j == 2) return m12;
                } else if (i == 2) {
                    if (j == 0) return m20;
                    if (j == 1) return m21;
                    if (j == 2) return m22;
                }

                throw new System.IndexOutOfRangeException("Invalid matrix index !");
            }
            set {
                if (i == 0) {
                    if (j == 0) m00 = value;
                    else if (j == 1) m01 = value;
                    else if (j == 2) m02 = value;
                } else if (i == 1) {
                    if (j == 0) m10 = value;
                    else if (j == 1) m11 = value;
                    else if (j == 2) m12 = value;
                } else if (i == 2) {
                    if (j == 0) m20 = value;
                    else if (j == 1) m21 = value;
                    else if (j == 2) m22 = value;
                } else {
                    throw new System.IndexOutOfRangeException("Invalid matrix index !");
                }
            }
        }

        public static Matrix3 identity {
            get {
                return new Matrix3(
                    1f,
                    0f,
                    0f,
                    0f,
                    1f,
                    0f,
                    0f,
                    0f,
                    1f
                );
            }
        }

        public static Matrix3 zero {
            get {
                return new Matrix3(
                    0f,
                    0f,
                    0f,
                    0f,
                    0f,
                    0f,
                    0f,
                    0f,
                    0f
                );
            }
        }

        public static Matrix3 operator *(float scalar, Matrix3 matrix) {
            return new Matrix3(
                scalar * matrix.m00,
                scalar * matrix.m01,
                scalar * matrix.m02,
                scalar * matrix.m10,
                scalar * matrix.m11,
                scalar * matrix.m12,
                scalar * matrix.m20,
                scalar * matrix.m21,
                scalar * matrix.m22
            );
        }

        public static Matrix3 operator *(Matrix3 matrix, float scalar) {
            return scalar * matrix;
        }

        public static Matrix3 operator /(Matrix3 matrix, float scalar) {
            if (scalar == 0f) {
                throw new System.DivideByZeroException("Cannot divide matrix by zero !");
            }

            float inverseScalar = 1f / scalar;

            return inverseScalar * matrix;
        }
        
        
        

    }
}
